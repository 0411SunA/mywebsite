{
  "hash": "946882a82499490733b72820013c3b50",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"LS 빅데이터 스쿨 homework 8.\"\nauthor: \"백선아\"\ndate: \"2024-09-10\"\ncategories: [bigdata]\njupyter: python3\n---\n\n::: {#92af6c87 .cell execution_count=1}\n``` {.python .cell-code}\n#  워킹 디렉토리 설정\nimport os\ncwd=os.getcwd()\nparent_dir = os.path.dirname(cwd)\nos.chdir(parent_dir)\nimport pandas as pd\nimport numpy as np\n\n# 파일이 있는 디렉토리로 변경\nos.chdir(\"C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project01\")\n\ndf = pd.read_csv(\"./data/leukemia_remission.txt\", sep='\\t')\nprint(df.shape)\n\ndf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(27, 7)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>REMISS</th>\n      <th>CELL</th>\n      <th>SMEAR</th>\n      <th>INFIL</th>\n      <th>LI</th>\n      <th>BLAST</th>\n      <th>TEMP</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.8</td>\n      <td>0.83</td>\n      <td>0.66</td>\n      <td>1.9</td>\n      <td>1.10</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.9</td>\n      <td>0.36</td>\n      <td>0.32</td>\n      <td>1.4</td>\n      <td>0.74</td>\n      <td>0.99</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0.8</td>\n      <td>0.88</td>\n      <td>0.70</td>\n      <td>0.8</td>\n      <td>0.18</td>\n      <td>0.98</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.87</td>\n      <td>0.87</td>\n      <td>0.7</td>\n      <td>1.05</td>\n      <td>0.99</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0.9</td>\n      <td>0.75</td>\n      <td>0.68</td>\n      <td>1.3</td>\n      <td>0.52</td>\n      <td>0.98</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# 문제 1. 데이터를 로드하고, 로지스틱 회귀모델을 적합하고, 회귀 표를 작성하세요.\n\n::: {#d854d0e4 .cell execution_count=2}\n``` {.python .cell-code}\nimport statsmodels.api as sm\nmodel = sm.formula.logit(\"REMISS ~ CELL + SMEAR + INFIL + LI + BLAST + TEMP\",\n                         data=df).fit()\nprint(model.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOptimization terminated successfully.\n         Current function value: 0.399886\n         Iterations 10\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                 REMISS   No. Observations:                   27\nModel:                          Logit   Df Residuals:                       20\nMethod:                           MLE   Df Model:                            6\nDate:                Tue, 10 Sep 2024   Pseudo R-squ.:                  0.3718\nTime:                        10:44:59   Log-Likelihood:                -10.797\nconverged:                       True   LL-Null:                       -17.186\nCovariance Type:            nonrobust   LLR p-value:                   0.04670\n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     64.2581     74.965      0.857      0.391     -82.670     211.187\nCELL          30.8301     52.135      0.591      0.554     -71.353     133.013\nSMEAR         24.6863     61.526      0.401      0.688     -95.903     145.275\nINFIL        -24.9745     65.281     -0.383      0.702    -152.923     102.974\nLI             4.3605      2.658      1.641      0.101      -0.849       9.570\nBLAST         -0.0115      2.266     -0.005      0.996      -4.453       4.430\nTEMP        -100.1734     77.753     -1.288      0.198    -252.567      52.220\n==============================================================================\n\nPossibly complete quasi-separation: A fraction 0.11 of observations can be\nperfectly predicted. This might indicate that there is complete\nquasi-separation. In this case some parameters will not be identified.\n```\n:::\n:::\n\n\n# 문제 2. 해당 모델은 통계적으로 유의한가요? 그 이유를 검정통계량를 사용해서 설명하시오.\n## 답: 통계적으로 유의하다. 이유: LLR p-value가 0.0467인데 유의수준 0.05보다 작으므로 유의하다 \n\n# 문제 3. 유의수준 0.2를 기준으로 통계적으로 유의한 변수는 몇개이며, 어느 변수 인가요?\n## 답: 2개 유의수준 0.2보다 작은 변수(LI, TEMP) \n\n\n# 문제 4. 다음 환자에 대한 오즈는 얼마인가요?\n### CELL (골수의 세포성): 65%\n### SMEAR (골수편의 백혈구 비율): 45%\n### INFIL (골수의 백혈병 세포 침투 비율): 55%\n### LI (골수 백혈병 세포의 라벨링 인덱스): 1.2\n### BLAST (말초혈액의 백혈병 세포 수): 1.1세포/μL\n### TEMP (치료 시작 전 최고 체온): 0.9\n\n::: {#70353e15 .cell execution_count=3}\n``` {.python .cell-code}\nmy_odds = np.exp(64.2581 +30.8301*0.65 + 24.686316*0.45 -24.9745*0.55 +4.3605*1.2 -0.0115*1.1 -100.1734*0.9)\nmy_odds\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nnp.float64(0.0381748712694388)\n```\n:::\n:::\n\n\n# 문제 5. 위 환자의 혈액에서 백혈병 세포가 관측되지 않은 확률은 얼마인가요?\n\n::: {#ca2ba115 .cell execution_count=4}\n``` {.python .cell-code}\nleuk = my_odds / (my_odds+1)\nleuk\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nnp.float64(0.036771137816849764)\n```\n:::\n:::\n\n\n# 문제 6. TEMP 변수의 계수는 얼마이며, 해당 계수를 사용해서 TEMP 변수가 백혈병 치료에 대한 영향을 설명하시오.\n### TEMP 계수: -100.1734\n### TEMP가 1단위 증가하면 백핼병 세포가 관측되지 않을 확률의\n### 오즈가 e^(-100.1734)배 감소한다는 것을 의미한다.\n### 즉 체온이 높아질수록 백혈병 세포가 관측될 확률이 높아진다. \n\n# 문제 7. CELL 변수의 99% 오즈비에 대한 신뢰구간을 구하시오.\n\n::: {#05bd2b30 .cell execution_count=5}\n``` {.python .cell-code}\nfrom scipy.stats import norm\ncell_coef = 30.8301 \ncell_std_err = 52.135 \nz = norm.ppf(0.995,0,1)\nupper = cell_coef + z * cell_std_err\nlower = cell_coef - z * cell_std_err\n```\n:::\n\n\n# 문제 8. 주어진 데이터에 대하여 로지스틱 회귀 모델의 예측 확률을 구한 후, \n# 50% 이상인 경우 1로 처리하여, 혼동 행렬를 구하시오.\n\n::: {#41f7af4e .cell execution_count=6}\n``` {.python .cell-code}\nfrom sklearn.metrics import confusion_matrix\n\npred_p = model.predict(df)\n\n# 2. 50% 기준으로 이진화 (0 또는 1로 변환)\npredictions = [1 if prob >= 0.5 else 0 for prob in pred_p]\n\n# 3. 실제 값 (df['REMISS'])과 예측 값 (predictions) 비교하여 혼동 행렬 계산\nconf_matrix = confusion_matrix(df['REMISS'], predictions)\n\n# 혼동 행렬 출력\nconf_matrix\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray([[15,  3],\n       [ 4,  5]])\n```\n:::\n:::\n\n\n# 문제 9. 해당 모델의 Accuracy는 얼마인가요?\n\n::: {#9a9e57ca .cell execution_count=7}\n``` {.python .cell-code}\n(15+5)/(15+3+4+5)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n0.7407407407407407\n```\n:::\n:::\n\n\n# 문제 10. 해당 모델의 F1 Score를 구하세요.\n\n::: {#2656d0c1 .cell execution_count=8}\n``` {.python .cell-code}\nprecision = 15/(15+4)\nrecall = 15/(15+3)\nF1_score = 2* (precision*recall/(precision + recall))\n```\n:::\n\n\n",
    "supporting": [
      "hw8_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}